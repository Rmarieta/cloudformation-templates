Parameters:
  RedisInstanceType:
    Description: EC2 instance type for the Redis cluster.
    Type: String
    Default: t4g.nano
    AllowedValues:
      - t4g.nano
      - t4g.micro
      - t4g.small
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - t4g.2xlarge

  LatestECSOptimizedAMI:
    Description: AMI ID for the EC2 instance running Redis.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/arm64/recommended/image_id

  SSHKey:
    Description: Name of the key pair to ssh into the EC2 instances.
    Type: AWS::EC2::KeyPair::KeyName

  EBInstanceType:
    Description: EC2 instance type for the Elastic Beanstalk environment. Check for the Free Tier options available in your region (t2.micro or t3.micro).
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      # - t4g.nano
      # - t4g.micro
      # - t4g.small
      # - t4g.medium
      # - t4g.large
      # - t4g.xlarge
      # - t4g.2xlarge

  EBMinSize:
    Description: Minimum number of EC2 instances for the Flask API.
    Type: Number
    Default: 1
    # EBMinSize should be higher than 0
    MinValue: 1
    ConstraintDescription: EBMinSize must be at least 1.

  EBMaxSize:
    Description: Maximum number of EC2 instances for the Flask API.
    Type: Number
    Default: 2
    # EBMaxSize should be greater than or equal to EBMinSize
    MinValue: 1
    ConstraintDescription: EBMaxSize must be greater than or equal to EBMinSize.

Mappings:
  InstanceTypeMemoryReservation:
    # Defining soft memory limit for the ECS Task Definition. Leaving >100MiB for the Docker process and for some margin (between 3-18% of total available MEM)
    t4g.nano:
      MemoryReservation: 400 # total 512 MiB, 419 MiB actually available to ECS container
    t4g.micro:
      MemoryReservation: 900 # total 1024 MiB, 917 MiB actually available to ECS container
    t4g.small:
      MemoryReservation: 1800 # total 2048 MiB, 1847 MiB actually available to ECS container
    t4g.medium:
      MemoryReservation: 3750 # total 4096 MiB, 3836 MiB actually available to ECS container
    t4g.large:
      MemoryReservation: 7500 # total 8192 MiB, 7814 MiB actually available to ECS container
    t4g.xlarge:
      MemoryReservation: 15200 # total 16384 MiB, 15772 MiB actually available to ECS container
    t4g.2xlarge:
      MemoryReservation: 31000 # total 32768 MiB, 31685 MiB actually available to ECS container

Resources:
  # VPC and Subnets definition
  PublicVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName"]]

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 172.31.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName", Public]]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      VpcId: !Ref PublicVPC
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName", Public]]

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      VpcId: !Ref PublicVPC
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName", Public]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName"]]

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PublicVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Shared resources definition
  SharedRedisPrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${AWS::StackName}-redis-dns.internal
      HostedZoneConfig:
        Comment: "Private hosted zone to route traffic to Redis cluster instance"
      VPCs:
        - VPCId: !Ref PublicVPC
          VPCRegion: !Ref AWS::Region

  SharedRedisInstanceDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref SharedRedisPrivateHostedZone
      Name: !Sub "api.${AWS::StackName}-redis-dns.internal"
      Type: A
      TTL: "20"
      ResourceRecords:
        - 172.31.255.0 # provide an IP that's part of the VPC but unused (not part of any subnets)

  SharedDNSRecordLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaRoute53UpdatePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                Resource: !Sub "arn:aws:route53:::hostedzone/${SharedRedisPrivateHostedZone}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SharedDNSRecordLambdaUpdate:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt SharedDNSRecordLambdaExecutionRole.Arn
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref SharedRedisPrivateHostedZone
          DNS_RECORD_NAME: !Ref SharedRedisInstanceDnsRecord
      Runtime: python3.11
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def lambda_handler(event, context):
              client = boto3.client('route53')

              response = client.change_resource_record_sets(
                  HostedZoneId=os.environ.get('HOSTED_ZONE_ID'),
                  ChangeBatch={
                      'Changes': [
                          {
                              'Action': 'UPSERT',
                              'ResourceRecordSet': {
                                  'Name': os.environ.get('DNS_RECORD_NAME'),
                                  'Type': 'A',
                                  'TTL': 20,
                                  'ResourceRecords': [
                                      {
                                          'Value': event['IpAddress']
                                      }
                                  ]
                              }
                          }
                      ]
                  }
              )
              
              response['ChangeInfo']['SubmittedAt'] = response['ChangeInfo']['SubmittedAt'].isoformat()

              return json.dumps(response)

  SharedDNSRecordLambdaDelete: # delete the record created with Lambda in the private hosted zone upon stack DELETE
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt SharedDNSRecordLambdaExecutionRole.Arn
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref SharedRedisPrivateHostedZone
          DNS_RECORD_NAME: !Ref SharedRedisInstanceDnsRecord
      Runtime: python3.11
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import cfnresponse

          def lambda_handler(event, context):

              response = { 'ChangeInfo': { 'Comment': 'Not a DELETE stack event' } }
              if event['RequestType'] == 'Delete':

                  client = boto3.client('route53')
                  dns_record_name = os.environ.get('DNS_RECORD_NAME')

                  # retrieve the current record value necessary for deletion
                  response_record_sets = client.list_resource_record_sets(
                      HostedZoneId=os.environ.get('HOSTED_ZONE_ID'),
                      StartRecordName=dns_record_name,
                      StartRecordType='A',
                      MaxItems='1'
                  )

                  current_value = None
                  if 'ResourceRecordSets' in response_record_sets:

                      record_set = response_record_sets['ResourceRecordSets'][0]

                      # add '.' to dns_record_name for trailing '.' in RecordSet.Name
                      if record_set['Name'] == f"{dns_record_name}." and record_set['Type'] == 'A':
                          current_value = record_set['ResourceRecords'][0]['Value']

                  # if a value has been found for the record
                  if current_value: 
                    response = client.change_resource_record_sets(
                        HostedZoneId=os.environ.get('HOSTED_ZONE_ID'),
                        ChangeBatch={
                            'Changes': [
                                {
                                    'Action': 'DELETE',
                                    'ResourceRecordSet': {
                                        'Name': dns_record_name,
                                        'Type': 'A',
                                        'TTL': 20,
                                        'ResourceRecords': [
                                            {
                                                'Value': current_value
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    )
              
                    response['ChangeInfo']['SubmittedAt'] = response['ChangeInfo']['SubmittedAt'].isoformat()

              response['event'] = json.dumps(event)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              return response

  SharedOnStackDeletion: # call the Lambda to delete the record in the private hosted zone to avoid failure of stack deletion
    Type: Custom::CleanUpPrivateZoneRecordLambda
    Properties:
      ServiceToken: !GetAtt SharedDNSRecordLambdaDelete.Arn

  # Security Group definitions
  EBSecurityGroup: # EB Security Group added in addition to the default EB SG to enable ssh
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for all ElasticBeanstalk Environments
      GroupName: !Sub ${AWS::StackName}-AWSEBCustomSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref PublicVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-env

  # to create an inbound rule from ECS to EB on port 6379 without creating a circular dependency
  EBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EBSecurityGroup
      FromPort: 6379
      ToPort: 6379
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ECSSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for ECS cluster
      GroupName: !Sub ${AWS::StackName}-ECSSecurityGroup
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 6379
          ToPort: 6379
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref EBSecurityGroup
      VpcId: !Ref PublicVPC
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName"]]

Outputs:
  # LoadBalancerURL:
  #   Description: URL to reach the load balancer and the API
  #   Value: !Join ["", ["http://", !GetAtt EBEnvironment.EndpointURL]]
  SharedRedisInstanceDnsRecord:
    Description: DNS name for Redis instance
    Value: !Ref SharedRedisInstanceDnsRecord
