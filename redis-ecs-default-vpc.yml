Parameters:
  InstanceType:
    Description: EC2 instance type for the Redis cluster.
    Type: String
    Default: t4g.nano
    AllowedValues:
      - t4g.nano
      - t4g.micro
      - t4g.small
      - t4g.medium
      - t4g.large
      - t4g.xlarge
      - t4g.2xlarge
  # ECSClusterName:
  #   Type: String
  #   Description: >-
  #     Specifies the ECS Cluster Name with which the resources would be
  #     associated
  #   Default: RedisCluster
  # SecurityGroupIds:
  #   Type: CommaDelimitedList
  #   Description: >-
  #     Optional - Specifies the Comma separated list of the Security Group Id of
  #     an existing Security Group.
  #   Default: ""
  VPCId:
    Description: Select the VPC for your resources
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: Select the Subnets
    Type: List<AWS::EC2::Subnet::Id>
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/arm64/recommended/image_id
  # IamRoleInstanceProfile:
  #   Type: String
  #   Description: >-
  #     Specifies the Name or the Amazon Resource Name (ARN) of the instance
  #     profile associated with the IAM role for the instance
  #   Default: "arn:aws:iam::097258850312:instance-profile/ecsInstanceRole"
  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the key pair to ssh into the EC2 instance

Resources:
  ECSInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceProfileRole

  ECSLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSOptimizedAMI
        SecurityGroupIds:
          - !GetAtt
            - EC2SecurityGroup
            - GroupId
        InstanceType: !Ref InstanceType
        KeyName: !Ref SSHKey
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        UserData: !Base64
          "Fn::Sub":
            - |-
              #!/bin/bash 
              echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config;
            - ClusterName: !Sub ${AWS::StackName}-cluster

  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: ECSCluster
    Properties:
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt
          - ECSLaunchTemplate
          - LatestVersionNumber
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Join
            - " - "
            - - ECS Instance
              - !Sub ${AWS::StackName}-cluster

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: RedisCluster
      Tags: []

  EC2CapacityProvider:
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  ClusterCPAssociation:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    DependsOn: ECSCluster
    Properties:
      Cluster: !Sub ${AWS::StackName}-cluster
      CapacityProviders:
        - !Ref EC2CapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref EC2CapacityProvider

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SG for ECS cluster
      GroupName: !Sub ${AWS::StackName}-SecurityGroup
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIpv6: "::/0"
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref "AWS::StackName"]]

Outputs:
  ECSCluster:
    Description: The created cluster.
    Value: !Ref ECSCluster
